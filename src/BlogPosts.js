import React from "react";
import { BrowserRouter as Router, Switch, Route, Link } from "react-router-dom";
import BlogPost from "./BlogPost";

export default function BlogPosts() {
    let posts = [
        {date: "1/29/21", topics: "CLI + Git", questions: [
            {q: "Was your first week what you expected? Why? Why not?", a: "My first week was not what I expected. I expected us to start coding first. However, I’m glad we are going over the general workflow of software development first because I believe Git can be a big barrier of entry to software development. I also expected Git to come more naturally because I have worked with it before."}, 
            {q: "What are you struggling with?", a: "I’m struggling to understand the proper workflow to use when using Git from the terminal and GitHub together."}, 
            {q: "What are you excited or eager to learn more about?", a: "I’m excited to fully understand GitHub because I can see how it can be very useful when making changes to a repository, when viewing the history of a repository, and during collaborative development."},
        ]},
        {date: "2/5/21", topics: "HTML + CSS", questions: [
            {q: "What are your thoughts on pseudo coding?", a: "Pseudo coding can be very useful when getting started on a project because you can turn the project into a set of simplified instructions, making the project less intimidating. Furthermore, pseudocode is just notes, so you can refer to your pseudocode in the future."}, 
            {q: "What are you struggling with?", a: "I'm struggling to add creativity to my assignments. I'm concerned with getting my assignments finished, but I'm not concerned with adding any creative flair to my work after it has been finished. However, I do enjoy what we are learning, and I am excited to keep learning:)"}, 
            {q: "What are you excited or eager to learn more about?", a: "I'm excited to start using GitHub collaboratively. I'm eager to offer solutions in the form of pull requests to others on GitHub and I'm eager to accept or reject pull requests from others for my own repositories."},
        ]},
        {date: "2/12/21", topics: "Pseudocode + JS", questions: [
            {q: "What are your thoughts about the roles HTML, CSS, and JavaScript play in the process of rendering content and providing user experience?", a: "In general, HTML is used to add elements to a web page, CSS is used to style those elements, and JavaScript is used to provide functionality and interactivity to a web page. Each one serves a different purpose and is crucial in creating a relevant or useful web page. You must become adept with each tool if you wish to become a competent web developer."}, 
            {q: "What are some objects that your blog incorporates?", a: "When I read this question at the beginning of the week, I was a bit puzzled as to what was being asked. However, now that I have completed the pseudocode assignment which forced me to think more programmatically and in a more object-oriented sense, I can now answer the question! The entire blog itself is an object. Based on how the document is structured, each blog post contains questions and the date it was written. The blog post is an object of a weekly blog, and each weekly blog is an object of the entire blog."}, 
            {q: "What are your thoughts on pseudo coding now?", a: "Pseudo coding is crucial to understanding complex programs. I was intimidated by the pseudo code project this week because it required us to convert an everyday task into an algorithm. I was lost until I started pseudo coding. I could not see the task algorithmically until I wrote instructions for the task in english, turned the instructions into a flowchart, and then converted the flowchart into objects and a deployment of different processes."},
        ]},
        {date: "2/21/21", topics: "JS + Algorithms", questions: [
            {q: "What was one thing you liked and disliked about each of the new topics covered in Pre Work?", a: "I like working with files from the command line because of how much quicker it is than clicking through different interfaces. I like pushing my projects to GitHub because it feels like I'm saving my work forever. I like Javascript because it is fun trying to emulate real life conditions into code and figuring out algorithms. I do not have as much fun working with HTML and CSS, and I find container logic intimidating, but I'm conifident as I become more comfortable with HTML, I will enjoy it more. Agile concepts were intriguing, and I'm excited to translate them into software development."}, 
            {q: "What was helpful?", a: "Providing the documentation was crucial to my completing the assignments. I like to read through the documentation and feel I have a thorough understanding before taking on the challenges. While I feel this mindset is not foolproof, I always felt prepared for the projects!"}, 
            {q: "What hindered your progress?", a: "I was very intimidated by pseudocode. I wanted to code right away instead. This mindset caused me to have a headache over a few assignments that were quite simple once broken down."},
            {q: "How did you overcome challenges?", a: "I started pseudocoding before trying to program! Pseudocode isn't necessarily another language or defined by principles. You can pseudocode in whatever way comes naturally to you. Once this became clear, it was much easier for me to take notes on assignments, take notes on those notes, and then translate those notes into code!"},
        ]},
        {date: "2/28/21", topics: "JS + Bootstrap", questions: [
            {q: "What is the number one thing that held you back this week? Why?", a: "The number one thing that held me back this week was feeling lost when starting assignments. Lecture is helpful, but I wish I had read or at least skimmed the documentation before being introduced to the content during lecture."}, 
            {q: "What is one thing you would like to learn more about regarding JavaScript (JSON, Data Structures)?", a: "I would like to get more comfortable with object-oriented programming. Functional programming is easy to grasp, but object-oriented programming causes you to think at a higher level. I also need to become more familiar with the syntax regarding constructors and inheritance."}, 
            {q: "What is one thing you would like to learn more about regarding Bootstrap or Atomic Design?", a: "Regarding Bootstrap, I would like to get better at spacing. Most of my time on my Campaign Components projects was spent trying to get everything aligned appropriately."},
        ]},
        {date: "3/7/21", topics: "JS + APIs", questions: [
            {q: "What did you learn about that helped you understand the development process?", a: "The Git flow strategy has really helped me understand the development process. You create a local repository, push it to Github, checkout a new branch, complete a user story, push your changes to Github, complete another user story and push it to Github until you are finished with the functionality. However, development is never actually finished. You will always think of something else you could have included or somebody else will think of something you could have included in the form of a pull request or issue. Pseudocode has also helped me break software development into simpler and smaller parts."}, 
            {q: "What does it mean to develop good code?", a: "Good code is usually clear and concise. You can get rid of unnecessary lines of code by taking advantage of libraries and APIs that have already done the mundane work for you. Clear code has plenty of comments so you or anybody else could revisit the project in the future and make changes. Good code also uses efficient algorithms so the program isn't using unnecessary computing power."}, 
            {q: "What does it mean to be a good developer?", a: "A good developer produces good code in a timely manner. They are conscious of the libraries and APIs they can use, the object-oriented structure of their program, how to comment their code, and how to use algorithms to make their code efficient. Good developers are also not stubborn or afraid to ask questions when they are stumped. Good developers must also be willing to research their own questions or they will never be independent."},
            {q: "What is one thing that programmers hate doing?", a: "Programmers hate asking for help! They believe it is a sign of weakness or defeat. However, if you ever want to deliver software in a timely manner, you must accept you do not know everything, and utilize your resources to your advantage."},
        ]},
        {date: "3/15/21", topics: "JS + MVC", questions: [
            {q: "What are three ideas you might want to do for your final project?", a: "I would like to produce something I can use in my daily life. I use Spotify daily to listen to music, however, Spotify can be very difficult if you are looking for something new. Spotify is very good at keeping you locked in a bubble. Spotify will rarely recommend me something I haven't heard before or something I haven't already rejected. I would like to be able to use APIs and a database on my machine to make a program that recommends obscure music to me from YouTube or other sources. Other ideas I would like to see realized are a statistics recorder for when I play in Smash Bros tournaments and some kind of reminder system to keep me organized."}, 
            {q: "Why do you see JavaScript useful or hard to use?", a: "Javascript is useful because it gives web pages functionality or makes web pages dynamic. With just HTML and CSS, you can make a pretty website, but the user cannot interact with the website and you interact with the user's data."}, 
            {q: "What aspects about JavaScript are you interested in learning more about?", a: "I want to learn more about objects, class interaction, and algorithms. I would like to be able to write efficient code and organized code that is reusable."},
            {q: "What are your thoughts about the MVC Design Pattern?", a: "The MVC design pattern is a great way to organize our code and segment our projects. It is easier to pseudocode a project when you look at the code from the perspective of model, view, controller. What data changes state, what goes in the interface, and what functions will my project require? MVC also encourages reusable code."},
            {q: "What are some other Design Patterns?", a: "A pattern I like to follow when programming is to divide the application into states. What happens on load, what can happen next, what can then happen, what happens in the end or before the program can end? If I have pseudocoded the project from beginning to end and was conscious of the data structures required, I can sequentially program states of the application until I am finished. However, this pattern of programming neglects the actual structure of the code meaning you may be typing more code than necessary or may not produce reusable code."},
        ]},
        {date: "3/21/21", topics: "React", questions: [
            {q: "Why do you see JavaScript Frameworks and Libraries useful or hard to use?", a: "Javascript Frameworks are hard to use because it's almost like learning a new programming language. However, they are useful because they prevent you from writing code that has already been written for you and they allow you more time during the planning stages of a project. Some Frameworks encourage organization and therefore allow easier translation from pseudocode to code."}, 
            {q: "What Frameworks or Libraries are you interested in learning more about?", a: "I would like to learn more about built-in Javascript Libraries. Like Frameworks, built-in Libraries prevent you from writing code that has already been written for you, giving you more time to spend on unique algorithmic problems that cannot be provided."}, 
            {q: "Find one emerging JavaScript tool that you would like to learn more about or use in your final project.", a: "I would like to learn more about APIs like Axios, so in my final project I can take information from other sources and use it for my own purposes. For example, I would like to be able to take information regarding my Smash tournament sets from the website they are hosted on and use that information in my own statistical analysis program."},
        ]},
        {date: "3/26/21", topics: "React + LStorage", questions: [
            {q: "Why are CLIs scary?", a: "Command Line Interfaces are scary because they can be used to execute operating system functions and access features not available in the graphical user interface. Using the CLI carelessly can cause important system files to be deleted."}, 
            {q: "What have you learned about CLIs?", a: "I have learned how to use a Linux CLI to navigate directories on my computer, create local repositories, connect a local repository to a GitHub repository, check repository status, commit repository changes, and push changes to GitHub."}, 
            {q: "Would you build a CLI? What would it do?", a: "If I built a CLI, I would like it to have quick and easy commands to stylize the graphical interface of my computer. I would like to have the ability to quickly change my cursor, my background image, from light mode to dark mode, etc."},
            {q: "List a some ideas that without a Framework, would take you a long time to code.", a: "Without a Framework, it can take a lot of time to style your html elements or components. Bootstrap provides you a lot of style flexibility by providing smart classes you can just add to an element or component. Frameworks can also prevent you from writing unnecessary classes. React hooks allow you to work with state within functional components, reducing lines of code."},
            {q: "How do you feel now compared to when you started?", a: "Compared to when I started, I've learned a lot that I didn't know I was gonna learn. I didn't really understand what Frameworks and Libraries were when I started, and now I understand how they have totally revolutionized and sped up the software development process. I am a lot more interested in programming now that I have a better understanding of the software development landscape."},
        ]},
        {date: "4/5/21", topics: "React + APIs", questions: [
            {q: "What do you like about React?", a: "I like that React forces me to structure my code in an MVC-like way because it forces me to think in a reductionist way. In other words, I can usually start working on a project by simply thinking, what variables do I actually need in state to perform all of the functions required? Then, after I've started coding, I can add more variables if they solve efficiency problems. I also like that I can see my model, view, and controller all organized in the same screen."}, 
            {q: "What are you struggling with the most about React?", a: "My biggest pitfall with React is understanding why sometimes setState and the synchronous nature of javascript collide. There was an instance in both of my projects this week where functions had to converted to asynchronous functions and await commands had to be used, but I didn't really understand what was taking place. I'm hoping I can get a better understanding of async and await by next week."}, 
            {q: "How has React caused you to rethink your existing projects?", a: "React has caused me to think--how can I reduce the size of my other projects by recoding them in a reductionist, MVC-like manner?"},
            {q: "What is your biggest win this week? Halfway through!", a: "My biggest win this week was realizing, if I seek solutions to my coding problems as they arise, and I have pseudo coded the requirements well, I can complete the projects rather quickly. I essentially completed the restaurant project in a day, and the puzzle slider in a day."},
        ]},
        {date: "4/12/21", topics: "PHP + SQL", questions: [
            {q: "What have you learned about PHP and server side programming that you were not aware of prior to this week?", a: "I was not aware PHP was so syntactically similar to Javascript. Creating API routes to interact with a database is also new to me, but it's exciting to finally have a thorough understanding of APIs and their importance to modern web developers!"}, 
            {q: "What do you want to know more about PHP and server side programming?", a: "I want to learn how to use PHP to interact with a file system."}, 
            {q: "How has learning PHP been? What are some similarities and differences you can see with JS?", a: "Learning PHP was not too difficult because syntactically it is very similiar to JS, however, scope and variable declaration in PHP seems more forgiving, despite JS already being much more forgiving than a language like Java."},
            {q: "What if you had started with PHP instead of JS?", a: "If I had started with a server-side language instead of a front-end language, I probably wouldn't have been as engaged in the content, because I wouldn't have been able to imagine a deliverable to the user. My motivation in software development lies in user experience, and it's harder to consider user experience when programming only on the back-end."},
            {q: "Find one library, framework, NPM package, and/or external web API you think you might want use for your final project.", a: "Ruby on Rails is quite popular, so it would probably benefit me to add it to my resume and to understand the root of its popularity. Furthermore, Ruby on Rails is an MVC framework much like React, and React has been my favorite part of the bootcamp's tech stack."},
        ]},
        {date: "4/19/21", topics: "Laravel", questions: [
            {q: "What are your thoughts about how far you have come? How has your Digital Literacy, Computational Thinking, and Adoption of Coding Culture increased?", a: "I have come very far since joining the bootcamp. I graduated from university in the spring of 2020 with a CS degree, however, I did not feel like a software developer. When I applied for jobs, I felt very unfamiliar with the software development workflow and tech stack. I knew I still had much to learn. When I came across the bootcamp, it offered exactly what I felt I was weak in. During the bootcamp, my love for algorithmic problem solving has been reinvigorated with our codewars competition and I have learned a tech stack that gives me the confidence to build whatever I want."}, 
            {q: "How do you plan on continuing to grow those areas?", a: "To continue growing in these areas, post-bootcamp, I'm going to continue my algorithm practice on codewars and create my own weekly projects that are more catered to my interests. I will stay up-to-date with the tech stack of modern web developers so I am a seen as a valuable asset to job recruiters."}, 
            {q: "What are you struggling with the most in the Tech Stack so far and why?", a: "My biggest struggle in the tech stack would have to be back-end development because alone, it does not interest me like front-end development does. As a programmer, I see more through the lens of the user. However, full-stack development excites me much more than front-end alone. I will come to appreciate back-end development more after I tackle the final project and see the power of full-stack development."},
            {q: "After making it through the tech stack, where do you think your current gaps are?", a: "As of today, I'm not sure yet how front-end and back-end development are going to come together, but I'm ecstatic knowing I will know before the bootcamp is over!"},
        ]},
        {date: "4/26/21", topics: "React Hooks + MVP", questions: [
            {q: "What are your thoughts about Laravel and React?", a: "I enjoy React because of it's MVC-esque structure. I know where to write the interface, I know where to write my data, and I know where to write my functions. Laravel is complicated because for each object, you have a migration, model, factory, seeder, controller, and routes. However, Laravel prevents you from having to write vanilla PHP and SQL, so once you become comfortable with it, you will reap the benefits."}, 
            {q: "What is one thing that you love about React or Laravel that you used to hate / didn't understand how to use?", a: "I love that React looks like HTML--it makes React very approachable. I love that React and Laravel are not really connected. In Laravel, all of your work leads up to creating API routes that you can travel to. So, you can cause your React interface (or any front-end language) to dynamically hit those routes."}, 
            {q: "Compared to weeks three and six, what are three ideas you might want to do for your final project? Are they the same, or have they changed now that you understand more about the technology and your limitations?", a: "My idea for my final project has completely changed. For my Attack of the Clones project, I created an MVP for the mobile version of Twitter. I would like to continue this project for my final project. I think it would be a neat way to connect and keep up with my fellow bootcampers post-bootcamp. Now that I understand the tech stack a bit more, the interface would be created in React, I would create a way to maintain every user's information in Laravel, and I would program the interface to hit API routes (created in Laravel) to update user information."},
            {q: "What cool new features have you learned about from the languages and frameworks you already know that will improve your workflow / add slick features to your final project?", a: "React Router will make it so much easier to change my application's interface at the push of a button and add organization to my workflow--create a component for each Route then create more components as necessary."},
            {q: "What do you think about react hooks?", a: "I like React Hooks because it greatly reduces line-of-code and complexity because I never have to write a class component again, never have to write 'this', and state because much easier to access."},
        ]},
        {date: "5/3/21", topics: "MVP + Kanban", questions: [
            {q: "What are your thoughts about the Final Project?", a: "The final project gives us experience with the Agile Methodology--taking each user story from the MVP through the verical slice of back-end to front-end. I think the final project will be very valuable experience we can apply to a real job."}, 
            {q: "What do you think you will struggle with in completing the Final Project? Where will you excel?", a: "With the final project, I believe I will struggle with staying true to the vertical slice. I generally enjoy programming the interface first, then programming the functionality. I believe I will excel in delivering a product that is not broken and not easy to break, because I will remain cognizant of time limations and will program the basic functionality first."}, 
            {q: "What are your opinions on the Agile Methodology? Do you think it takes up time? Do you think large scale projects can be completed without it?", a: "I like the Agile Methodology for large scale projects because it keeps you organized. I would have had no idea where to start with my final project had I not created the MVP. Furthermore, the MVP and Kanban Board give you perspective on how long a project could take, so you can scale down based on a time estimation. However, smaller projects that could be completed in less than a week do not require an MVP and the enforcement of the verical slice, because that would just take up time."},
        ]},
        {date: "5/10/21", topics: "Full Stack", questions: [
            {q: "How have you progressed and struggled during the time while building your Final Project?", a: "During production, I have realized my MVP was not within reason based on the time allotted. I have scaled down my application tremendously. My project is no longer a checkers client with social media functionality. I have removed the social media functionality. I have also removed the concept of letting two people play checkers together, and instead opted to let two users send text messages, and am seeking real-time messaging."}, 
            {q: "When was the last time your pseudo coded? What has changed in your method from then to now?", a: "I pseudo code just about every time I sit down to code, but instead of writing on a piece of paper, I am usually typing in a notepad what I am trying to accomplish. I tweak my notes every time something is accomplished and every hour or two."}, 
        ]},
        {date: "5/17/21", topics: "Full Stack", questions: [
            {q: "What was your experience like overall in the Bootcamp?", a: "My experience with the Bootcamp was super positive. I met a lot of great people, made a lot of developments in terms of career strategy, have new skills to add to my resume, gained experience in the agile methodology and soft skills, gained experience in object-oriented programming, discovered new passions, and now have a portfolio to show off to employers."}, 
            {q: "When you look back on this blog, where do you see yourself growing the most?", a: "Looking back on the blog, I see myself applying the skills I have learned in the bootcamp to reach employers, create my brand, create my own projects, update my current projects, learn additional skills and tech stacks, discover even more about myself, and find a fulfilling job:)"}, 
        ]},
    ]
    
    return (
        <>
            <div className='Page bg-dark text-white d-flex align-items-center justify-content-center'>
                <div className='Introduction'>
                    <h1 className='display-2 text-center'>
                        <samp>
                            <a href='https://www.awesomeinc.org/bootcamp' target='_blank' rel='noreferrer' className='title'>
                                <span>Awesome Inc Bootcamp</span>
                            </a>
                            {' Blog'}
                        </samp>
                    </h1>
                    <h1 className='display-5 text-center pb-3 fst-italic'><samp>Spring 2021</samp></h1>
                    <div className='overflow-auto border border-white rounded' style={ {height: '321px'} }>
                        <div class="accordion" id="accordionExample" style={ {maxWidth: '989.65px'} }>
                            { posts.map((post, index) => <BlogPost post={post} index={index} key={index}></BlogPost>) }
                        </div>
                    </div>
                </div>        
            </div>
        </>
    );
}